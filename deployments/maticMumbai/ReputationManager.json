{
  "address": "0x7AEafd576637B82042fF53Cd53382A065b16DBB0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        }
      ],
      "name": "calculateMinScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "update",
          "type": "uint256"
        }
      ],
      "name": "decrementScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "utilizer",
          "type": "address"
        }
      ],
      "name": "filterTraders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "findTrader",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "update",
          "type": "uint256"
        }
      ],
      "name": "incrementScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        }
      ],
      "name": "isReputable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "setTraderScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trader_scores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8aeff5576c8d1b1e0304e26c440e4f356a153a541f41d064a6a9e95d988add3",
  "receipt": {
    "to": null,
    "from": "0x2C7Cb3cB22Ba9B322af60747017acb06deB10933",
    "contractAddress": "0x7AEafd576637B82042fF53Cd53382A065b16DBB0",
    "transactionIndex": 0,
    "gasUsed": "1077604",
    "logsBloom": "0x
    "blockHash": "0xe17bc518d1e81c983c7b521255b38ca6ff59c6bf2637ab26ca4f4713b0304a8f",
    "transactionHash": "0xf8aeff5576c8d1b1e0304e26c440e4f356a153a541f41d064a6a9e95d988add3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30319459,
        "transactionHash": "0xf8aeff5576c8d1b1e0304e26c440e4f356a153a541f41d064a6a9e95d988add3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002c7cb3cb22ba9b322af60747017acb06deb10933",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017ed78349e3fb24000000000000000000000000000000000000000000000000a9c5da136c96b22c0000000000000000000000000000000000000000000028a4965a35956d6a714a000000000000000000000000000000000000000000000000a847029022b2b7080000000000000000000000000000000000000000000028a497d90d18b74e6c6e",
        "logIndex": 0,
        "blockHash": "0xe17bc518d1e81c983c7b521255b38ca6ff59c6bf2637ab26ca4f4713b0304a8f"
      }
    ],
    "blockNumber": 30319459,
    "cumulativeGasUsed": "1077604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2DF14Cc9Ec0281Bd144aa0EC3caDcC22Fc77Cbc5",
    "0x92271eecD653dF106c976Aa741C6056A9055efD4"
  ],
  "numDeployments": 6,
  "solcInputHash": "68217fe2b7821a85492f024b6a44385c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"}],\"name\":\"calculateMinScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"decrementScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"}],\"name\":\"filterTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"findTrader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"incrementScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"}],\"name\":\"isReputable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"setTraderScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trader_scores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decrementScore(address,uint256)\":{\"details\":\"score >= 0, update > 0\"},\"filterTraders(uint256,address)\":{\"details\":\"percentile is is wad 0-100\"},\"incrementScore(address,uint256)\":{\"details\":\"score >= 0, update > 0\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decrementScore(address,uint256)\":{\"notice\":\"decrements trader's score\"},\"filterTraders(uint256,address)\":{\"notice\":\"returns a list of top X percentile traders excluding the utilizer. \"},\"incrementScore(address,uint256)\":{\"notice\":\"increments trader's score\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/reputationmanager.sol\":\"ReputationManager\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363732333735383037303231\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/protocol/reputationmanager.sol\":{\"content\":\"pragma solidity ^0.8.16;\\nimport {config} from \\\"../utils/helpers.sol\\\"; \\nimport {FixedPointMathLib} from \\\"lib/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\ncontract ReputationManager {\\n    using FixedPointMathLib for uint256;\\n\\n    mapping(address=>uint256) public trader_scores; // trader address => score\\n    mapping(address=>bool) public isRated;\\n    address[] public traders;\\n\\n    address controller;\\n    address marketManager;\\n\\n    address deployer;\\n\\n    modifier onlyProtocol() {\\n        require(msg.sender == controller || msg.sender == marketManager || msg.sender == deployer, \\\"ReputationManager: !protocol\\\");\\n        _;\\n    }\\n\\n    \\n\\n    constructor(\\n        address _controller,\\n        address _marketManager\\n    ) {\\n       controller = _controller;\\n       marketManager = _marketManager;\\n       deployer = msg.sender;\\n    }\\n\\n    function calculateMinScore(uint256 percentile) view external returns (uint256) {\\n        uint256 l = traders.length * config.WAD;\\n        if (percentile / 1e2 == 0) {\\n        return 0;\\n        }\\n        uint256 x = l.mulWadDown(percentile / 1e2);\\n        x /= config.WAD;\\n        return trader_scores[traders[x - 1]];\\n    }\\n\\n    // change visiblity, external only for testing.\\n    function setTraderScore(address trader, uint256 score) external {\\n        uint256 prev_score = trader_scores[trader];\\n        if (score > prev_score) {\\n        incrementScore(trader, score - prev_score);\\n        } else if (score < prev_score) {\\n        decrementScore(trader, prev_score - score);\\n        }\\n    }\\n    \\n    function isReputable(address trader, uint256 percentile) view external returns (bool) {\\n        uint256 k = findTrader(trader);\\n        uint256 n = (traders.length - (k+1))*config.WAD;\\n        uint256 N = traders.length*config.WAD;\\n        uint256 p = uint256(n).divWadDown(N)*10**2;\\n\\n        if (p >= percentile) {\\n        return true;\\n        } else {\\n        return false;\\n        }\\n    }\\n\\n    /**\\n    @dev percentile is is wad 0-100\\n    @notice returns a list of top X percentile traders excluding the utilizer. \\n    */\\n    function filterTraders(uint256 percentile, address utilizer) view public returns (address[] memory) {\\n        uint256 l = traders.length * config.WAD;\\n        \\n        // if below minimum percentile, return all traders excluding the utilizer\\n        if (percentile / 1e2 == 0) {\\n        if (isRated[utilizer]) {\\n            address[] memory result = new address[](traders.length - 1);\\n\\n            uint256 j = 0;\\n            for (uint256 i=0; i<traders.length; i++) {\\n            if (utilizer == traders[i]) {\\n                j = 1;\\n                continue;\\n            }\\n            result[i - j] = traders[i];\\n            }\\n            return result;\\n        } else {\\n            return traders;\\n        }\\n        }\\n\\n        uint256 x = l.mulWadDown((config.WAD*100 - percentile) / 1e2);\\n        x /= config.WAD;\\n\\n        address[] memory selected; \\n        if (utilizer == address(0) || !isRated[utilizer]) {\\n        selected = new address[](x);\\n        for (uint256 i=0; i<x; i++) {\\n            selected[i] = traders[i];\\n        }\\n        } else {\\n        selected = new address[](x - 1);\\n        uint256 j=0;\\n        for (uint256 i = 0; i<x; i++) {\\n            if (traders[i] == utilizer) {\\n            j = 1;\\n            continue;\\n            }\\n            selected[i - j] = traders[i];\\n        }\\n        }\\n\\n        return selected;\\n    }\\n\\n    function getTraders() view public returns (address[] memory) {\\n        return traders;\\n    }\\n\\n    /**\\n    @notice increments trader's score\\n    @dev score >= 0, update > 0\\n    */\\n    function incrementScore(address trader, uint256 update) onlyProtocol public {\\n        trader_scores[trader] += update;\\n        _updateRanking(trader, true);\\n    }\\n\\n    /**\\n    @notice decrements trader's score\\n    @dev score >= 0, update > 0\\n    */\\n    function decrementScore(address trader, uint256 update) onlyProtocol public {\\n        if (update >= trader_scores[trader]) {\\n        trader_scores[trader] = 0;\\n        } else {\\n        trader_scores[trader] -= update;\\n        }\\n        _updateRanking(trader, false);\\n    }\\n\\n    /**\\n    @notice updates top trader array\\n    @dev holy moly is this ugly\\n    */\\n    function _updateRanking(address trader, bool increase) internal {\\n        uint256 score = trader_scores[trader];\\n\\n        if (!isRated[trader]) {\\n        isRated[trader] = true;\\n        if (traders.length == 0) {\\n            traders.push(trader);\\n            return;\\n        }\\n        for (uint256 i=0; i<traders.length; i++) {\\n            if (score > trader_scores[traders[i]]) {\\n            traders.push(address(0));\\n            _shiftRight(i, traders.length-1);\\n            traders[i] = trader;\\n            return;\\n            }\\n            if (i == traders.length - 1) {\\n            traders.push(trader);\\n            return;\\n            }\\n        }\\n        } else {\\n        uint256 k = findTrader(trader);\\n        //swap places with someone.\\n        if ((k == 0 && increase)\\n        || (k == traders.length - 1 && !increase)) {\\n            return;\\n        }\\n\\n        if (increase) {\\n            for (uint256 i=0; i<k; i++) {\\n            if (score > trader_scores[traders[i]]) {\\n                _shiftRight(i,k);\\n                traders[i] = trader;\\n                return;\\n            }\\n            }\\n        } else {\\n            for (uint256 i=traders.length - 1; i>k; i--) {\\n            if (score < trader_scores[traders[i]]) {\\n                _shiftLeft(k, i);\\n                traders[i] = trader;\\n                return;\\n            }\\n            }\\n        }\\n        }\\n    }\\n\\n    function findTrader(address trader) public view returns (uint256) {\\n    for (uint256 i=0; i<traders.length; i++) {\\n        if (trader == traders[i]) {\\n            return i;\\n        }\\n        }\\n    }\\n\\n    /**\\n    @notice helpers\\n    */\\n    function _shiftRight(uint256 pos, uint256 end) internal {\\n        for (uint256 i=end; i>pos; i--) {\\n        traders[i] = traders[i-1];\\n        }\\n    }\\n\\n    function _shiftLeft(uint256 pos, uint256 end) internal {\\n        for (uint256 i=pos; i<end; i++) {\\n        traders[i] = traders[i+1];\\n        }\\n    }\\n    \\n}\",\"keccak256\":\"0xf4ed7a22f33ee9972a9e0cd93b7a3c8bcfbdedc6552a1dd146b90fb504c61dc6\"},\"contracts/utils/helpers.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nlibrary config{\\n\\n  uint256 public constant WAD_PRECISION = 18; \\n  uint256 public constant WAD = 1e18; \\n  uint256 public constant USDC_dec = 1e6; \\n  uint256 public constant roundLimit = 1e14; //0.0001 \\n\\n  //Max amount in one transaction \\n  uint256 private constant max_amount = 1e8 * WAD; \\n\\n  //Min amount in one transaction \\n  uint256 private constant min_amount = WAD/1e4; \\n\\n  function convertToWad(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    //number should not be 18 dec, but in collateral_dec\\n    new_number = number * (10 ** (WAD_PRECISION - dec));\\n    assert(new_number <= max_amount); \\n  }\\n\\n  function wadToDec(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    // number should be 18 dec \\n    assert(isInWad(number)); \\n    new_number = number/(10 ** (WAD_PRECISION - dec)); \\n\\n  }\\n\\n  function isInWad(uint256 number) internal pure returns(bool){\\n    return (number >= min_amount); \\n  }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0xd30e0b9fdc4387086c91449032c63c8190e50bd580306e1e2a0b0dccbf735779\"},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806323ba61071161007157806323ba61071461013a5780632a6b80821461016d57806344c743931461018d57806357b61360146101ad578063e1648cd2146101b5578063e8a78026146101c857600080fd5b80630622fd17146100ae5780630d159896146100c35780630e2ebf06146100e9578063135e563d146100fc578063224e1c2d14610127575b600080fd5b6100c16100bc366004610f6b565b6101db565b005b6100d66100d1366004610f95565b610225565b6040519081526020015b60405180910390f35b6100d66100f7366004610fae565b6102d7565b61010f61010a366004610f95565b610335565b6040516001600160a01b0390911681526020016100e0565b6100c1610135366004610f6b565b61035f565b61015d610148366004610fae565b60016020526000908152604090205460ff1681565b60405190151581526020016100e0565b61018061017b366004610fc9565b610462565b6040516100e09190610ff5565b6100d661019b366004610fae565b60006020819052908152604090205481565b610180610893565b6100c16101c3366004610f6b565b6108f5565b61015d6101d6366004610f6b565b6109b2565b6001600160a01b0382166000908152602081905260409020548082111561020f5761020a836101c3838561104c565b505050565b8082101561020a5761020a83610135848461104c565b600254600090819061024090670de0b6b3a76400009061105f565b905061024d60648461107e565b60000361025d5750600092915050565b600061027461026d60648661107e565b8390610a45565b9050610288670de0b6b3a76400008261107e565b9050600080600261029a60018561104c565b815481106102aa576102aa6110a0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054949350505050565b6000805b60025481101561032f57600281815481106102f8576102f86110a0565b6000918252602090912001546001600160a01b039081169084160361031d5792915050565b80610327816110b6565b9150506102db565b50919050565b6002818154811061034557600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031633148061038257506004546001600160a01b031633145b8061039757506005546001600160a01b031633145b6103e85760405162461bcd60e51b815260206004820152601c60248201527f52657075746174696f6e4d616e616765723a202170726f746f636f6c0000000060448201526064015b60405180910390fd5b6001600160a01b0382166000908152602081905260409020548110610425576001600160a01b038216600090815260208190526040812055610453565b6001600160a01b0382166000908152602081905260408120805483929061044d90849061104c565b90915550505b61045e826000610a61565b5050565b60025460609060009061047e90670de0b6b3a76400009061105f565b905061048b60648561107e565b600003610637576001600160a01b03831660009081526001602052604090205460ff16156105d4576002546000906104c59060019061104c565b67ffffffffffffffff8111156104dd576104dd6110cf565b604051908082528060200260200182016040528015610506578160200160208202803683370190505b5090506000805b6002548110156105c8576002818154811061052a5761052a6110a0565b6000918252602090912001546001600160a01b039081169087160361055257600191506105b6565b60028181548110610565576105656110a0565b6000918252602090912001546001600160a01b031683610585848461104c565b81518110610595576105956110a0565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806105c0816110b6565b91505061050d565b5081935050505061088d565b600280548060200260200160405190810160405280929190818152602001828054801561062a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161060c575b505050505091505061088d565b6000610665606486610651670de0b6b3a76400008361105f565b61065b919061104c565b61026d919061107e565b9050610679670de0b6b3a76400008261107e565b905060606001600160a01b03851615806106ac57506001600160a01b03851660009081526001602052604090205460ff16155b15610774578167ffffffffffffffff8111156106ca576106ca6110cf565b6040519080825280602002602001820160405280156106f3578160200160208202803683370190505b50905060005b8281101561076e5760028181548110610714576107146110a0565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610744576107446110a0565b6001600160a01b039092166020928302919091019091015280610766816110b6565b9150506106f9565b50610888565b61077f60018361104c565b67ffffffffffffffff811115610797576107976110cf565b6040519080825280602002602001820160405280156107c0578160200160208202803683370190505b5090506000805b8381101561088557866001600160a01b0316600282815481106107ec576107ec6110a0565b6000918252602090912001546001600160a01b03160361080f5760019150610873565b60028181548110610822576108226110a0565b6000918252602090912001546001600160a01b031683610842848461104c565b81518110610852576108526110a0565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061087d816110b6565b9150506107c7565b50505b925050505b92915050565b606060028054806020026020016040519081016040528092919081815260200182805480156108eb57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108cd575b5050505050905090565b6003546001600160a01b031633148061091857506004546001600160a01b031633145b8061092d57506005546001600160a01b031633145b6109795760405162461bcd60e51b815260206004820152601c60248201527f52657075746174696f6e4d616e616765723a202170726f746f636f6c0000000060448201526064016103df565b6001600160a01b038216600090815260208190526040812080548392906109a19084906110e5565b9091555061045e9050826001610a61565b6000806109be846102d7565b90506000670de0b6b3a76400006109d68360016110e5565b6002546109e3919061104c565b6109ed919061105f565b600254909150600090610a0990670de0b6b3a76400009061105f565b90506000610a178383610e04565b610a2290606461105f565b9050858110610a3857600194505050505061088d565b600094505050505061088d565b6000610a5a8383670de0b6b3a7640000610e15565b9392505050565b6001600160a01b0382166000908152602081815260408083205460019092529091205460ff16610c80576001600160a01b03831660009081526001602081905260408220805460ff191690911790556002549003610b0d575050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0392909216919091179055565b60005b600254811015610c7a5760008060028381548110610b3057610b306110a0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054821115610bfd57600280546001818101835560008390527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910180546001600160a01b03191690559054610bb5918391610bb0919061104c565b610e33565b8360028281548110610bc957610bc96110a0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b600254610c0c9060019061104c565b8103610c68575050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b03939093169290921790915550565b80610c72816110b6565b915050610b10565b50505050565b6000610c8b846102d7565b905080158015610c985750825b80610cb95750600254610cad9060019061104c565b81148015610cb9575082155b15610cc45750505050565b8215610d825760005b81811015610d7c5760008060028381548110610ceb57610ceb6110a0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054831115610d6a57610d218183610e33565b8460028281548110610d3557610d356110a0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b80610d74816110b6565b915050610ccd565b50610c7a565b600254600090610d949060019061104c565b90505b81811115610dfd5760008060028381548110610db557610db56110a0565b60009182526020808320909101546001600160a01b03168352820192909252604001902054831015610deb57610d218282610ec1565b80610df5816110f8565b915050610d97565b5050505050565b6000610a5a83670de0b6b3a7640000845b6000826000190484118302158202610e2c57600080fd5b5091020490565b805b8281111561020a576002610e4a60018361104c565b81548110610e5a57610e5a6110a0565b600091825260209091200154600280546001600160a01b039092169183908110610e8657610e866110a0565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580610eb9816110f8565b915050610e35565b815b8181101561020a576002610ed88260016110e5565b81548110610ee857610ee86110a0565b600091825260209091200154600280546001600160a01b039092169183908110610f1457610f146110a0565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580610f47816110b6565b915050610ec3565b80356001600160a01b0381168114610f6657600080fd5b919050565b60008060408385031215610f7e57600080fd5b610f8783610f4f565b946020939093013593505050565b600060208284031215610fa757600080fd5b5035919050565b600060208284031215610fc057600080fd5b610a5a82610f4f565b60008060408385031215610fdc57600080fd5b82359150610fec60208401610f4f565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108855783516001600160a01b031683529284019291840191600101611011565b634e487b7160e01b600052601160045260246000fd5b8181038181111561088d5761088d611036565b600081600019048311821515161561107957611079611036565b500290565b60008261109b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600182016110c8576110c8611036565b5060010190565b634e487b7160e01b600052604160045260246000fd5b8082018082111561088d5761088d611036565b60008161110757611107611036565b50600019019056fea2646970667358221220d947059f77003dc41a76e4f38b3ad4c146246eabf691192e7a3d25924090555264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decrementScore(address,uint256)": {
        "details": "score >= 0, update > 0"
      },
      "filterTraders(uint256,address)": {
        "details": "percentile is is wad 0-100"
      },
      "incrementScore(address,uint256)": {
        "details": "score >= 0, update > 0"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decrementScore(address,uint256)": {
        "notice": "decrements trader's score"
      },
      "filterTraders(uint256,address)": {
        "notice": "returns a list of top X percentile traders excluding the utilizer. "
      },
      "incrementScore(address,uint256)": {
        "notice": "increments trader's score"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15981,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "trader_scores",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15985,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "isRated",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15988,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "traders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15990,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "controller",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15992,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "marketManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15994,
        "contract": "contracts/protocol/reputationmanager.sol:ReputationManager",
        "label": "deployer",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}